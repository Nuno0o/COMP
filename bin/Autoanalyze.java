/* Autoanalyze.java */
/* Generated By:JavaCC: Do not edit this line. Autoanalyze.java */
import java.io.*;
import java.util.*;
import org.apache.commons.io.*;

public class Autoanalyze implements AutoanalyzeConstants {

        public static String str;
        public static Set<String> vars;
        public static File in;
        public static File out;

        public static void hasAssignedValue(Token t) throws Exception{
        if(!vars.contains(t.image))
        throw new Exception(in.getName()+" l."+t.beginLine+": Uninitialized variable \u005c""+t.image+"\u005c"");
        }

        public static void main(String[] args){

                if(args.length != 1 && args.length != 3 || args.length == 3 && !args[1].equals("-d")){
                        System.out.println("Usage: java Autoanalyze <source_path> [-d <dest_path>]");
                        return;
                }
                in = new File(args[0]);

                if(!in.exists() || !in.isFile()){
                        System.out.println("Invalid file: "+args[0]);
                        return;
                }

                String file_name = in.getName();

                if(args.length == 3) out = new File(args[2]);
                else out = new File(in.getParent()+"/"+file_name+".java");

                vars = new HashSet<String>();
                str = "import dk.brics.automaton.*;\u005cn";
                str += "import org.apache.commons.io.*;\u005cn";
                str += "import java.io.*;\u005cn\u005cn";
                str += "public class " + file_name + "{\u005cn";
                str += "\u005ctpublic static void main(String[] args){\u005cn";
                str += "\u005ct\u005cttry{\u005cn";

                System.out.print("Parsing "+in.getName()+" ... ");

                try{
                        Autoanalyze parser = new Autoanalyze(new FileInputStream(in));
                        parser.Start();

                        str += "\u005ct\u005ct}catch(Exception e){e.printStackTrace();}\u005cn\u005ct}\u005cn}";
                        System.out.println("Done!");

                        FileUtils.writeStringToFile(out,str);

                }catch(Exception e){
                System.out.println("Rejected!");
                e.printStackTrace();
                }
        }

  static final public void Start() throws ParseException, Exception {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case TEST:
      case COMPARE:
      case INFO:
      case WRITE:
      case MLCOMMENT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Stmt();
    }
    jj_consume_token(0);
  }

  static final public void Stmt() throws ParseException, Exception {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MLCOMMENT:{
      jj_consume_token(MLCOMMENT);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
str += "\u005ct\u005ct\u005ct";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      Assign();
      break;
      }
    case TEST:
    case COMPARE:
    case INFO:
    case WRITE:{
      NAssign();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(END_STMT);
str += ";\u005cn";
  }

  static final public void Assign() throws ParseException, Exception {Token var;
    var = jj_consume_token(VAR);
    jj_consume_token(ASSIGN);
if(vars.add(var.image))
                        str += "Automaton ";
                str += var.image + " = ";
    Expr();
  }

  static final public void Expr() throws ParseException, Exception {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      t = jj_consume_token(VAR);
hasAssignedValue(t);str += t.image;
      break;
      }
    case UNARY_OP:{
      t = jj_consume_token(UNARY_OP);
      jj_consume_token(OPEN);
str += "BasicOperations.complement(";
      Expr();
      jj_consume_token(CLOSE);
str += ")";
      break;
      }
    case BINARY_OP:{
      t = jj_consume_token(BINARY_OP);
      jj_consume_token(OPEN);
switch(t.image){
                                case "union":
                                str += "BasicOperations.";
                                str += "union";
                                break;
                                case "concatenation":
                                str += "BasicOperations.";
                                str += "concatenate";
                                break;
                                case "intersection":
                                str += "BasicOperations.";
                                str += "intersection";
                                break;
                                case "product":
                                str += "Utilities.";
                                str += "product";
                                break;
                                case "difference":
                                str += "BasicOperations.";
                                str += "minus";
                                break;
                        }
                        str += "(";
      Expr();
      jj_consume_token(COMMA);
str += ",";
      Expr();
      jj_consume_token(CLOSE);
str += ")";
      break;
      }
    case READ:{
      jj_consume_token(READ);
      jj_consume_token(OPEN);
      t = jj_consume_token(PATH);
      jj_consume_token(CLOSE);
str += "DotParser.fromDot(new File("+t.image+"))";
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NAssign() throws ParseException, Exception {Token t1,t2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TEST:{
      jj_consume_token(TEST);
      jj_consume_token(OPEN);
      t1 = jj_consume_token(VAR);
      jj_consume_token(COMMA);
      t2 = jj_consume_token(PATH);
hasAssignedValue(t1);
                                str += "Utilities.test("+t1.image+",new File("+t2.image+"))";
      break;
      }
    case COMPARE:{
      jj_consume_token(COMPARE);
      jj_consume_token(OPEN);
      t1 = jj_consume_token(VAR);
      jj_consume_token(COMMA);
      t2 = jj_consume_token(VAR);
hasAssignedValue(t1);
                                hasAssignedValue(t2);
                                str += "Utilities.compare("+t1.image+","+t2.image+")";
      break;
      }
    case INFO:{
      jj_consume_token(INFO);
      jj_consume_token(OPEN);
      t1 = jj_consume_token(VAR);
hasAssignedValue(t1);
                                str += "Utilities.info("+t1.image+")";
      break;
      }
    case WRITE:{
      jj_consume_token(WRITE);
      jj_consume_token(OPEN);
      t1 = jj_consume_token(VAR);
      jj_consume_token(COMMA);
      t2 = jj_consume_token(PATH);
hasAssignedValue(t1);
                                str += "FileUtils.writeStringToFile(new File("+t2.image+"),"+t1.image+".toDot())";
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CLOSE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AutoanalyzeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf8200,0x80000,0x78200,0x5a00,0x78000,};
   }

  /** Constructor with InputStream. */
  public Autoanalyze(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Autoanalyze(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AutoanalyzeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Autoanalyze(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AutoanalyzeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Autoanalyze(AutoanalyzeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AutoanalyzeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
