options{ LOOKAHEAD=1;}

PARSER_BEGIN(Dotparser)
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class Dotparser{
	public static void main(String[] args) throws ParseException{
		try{
			if(args.length != 1){
				System.exit(1);
			}
			File file = new File(args[0]);
			FileInputStream input = new FileInputStream(file);
			Dotparser tree = new Dotparser(input);
			tree.Start();
			System.out.println("accept");
		}catch(Exception e){System.out.println("reject");}
	}
}
PARSER_END(Dotparser)

SKIP:{" "|"\r"|"\t"|"\n"}

TOKEN:{	
< AUTOMATA : ("automata") >|						//automata
< START : ("{") >|									//begin
< FINISH : ("}") >|									//end
< STARTNODE : ("start") >|
< FINALNODES : ("final") >|
< STATE: (["A"-"Z"])(["A"-"Z","a"-"z","0"-"9"]|"_")* >|	//variable name (must start with a capital letter)
< INPUT: (["A"-"Z","a"-"z","0"-"9"])+ >|	//variable name (must start with a capital letter)
< ASSIGN: ("->") >|									//varible assignement
< OPEN: ("(") >|									//open parenthesis (
< CLOSE: (")") >|									//close parenthesis )
< OPEN2: ("[") >|									//open parenthesis [
< CLOSE2: ("]") >|									//close parenthesis ]
< EPSILON: ("epsilon") >|
< TOP: ("'") >|										//'
< END: (";") >|										//end statement
< COMMA: (",") >									//comma
}

SimpleNode Start():{}{<AUTOMATA><START>Stmt()StartNodes()EndNodes()<FINISH>{return jjtThis;}}

void Stmt():{Token st1,st2;}{st1=<STATE> <ASSIGN> st2=<STATE> Inputs() <END> (Stmt())?}

void Inputs():{}{<OPEN2> ListInputs() <CLOSE2>}

void ListInputs():{Token i;}{(<TOP> i=<INPUT> <TOP> | i=<EPSILON>) (<COMMA> ListInputs())?}

void StartNodes():{Token st;}{<STARTNODE> <OPEN2> st=<STATE> <CLOSE2> <END>}

void EndNodes():{}{<FINALNODES> <OPEN2> ListNodes() <CLOSE2> <END>}

void ListNodes():{Token st;}{st=<STATE> (<COMMA> ListNodes())?}