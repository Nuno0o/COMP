options{
	LOOKAHEAD=2;
	FORCE_LA_CHECK=true;
	STATIC=true;
}

PARSER_BEGIN(DotParser)

import dk.brics.automaton.*;
import java.io.*;
import java.util.*;

public class DotParser{

	static Automaton automaton;
	static HashMap<String,State> states;
	static State initial_state;
	static DotParser parser = null;
	static boolean determinism;
	static ArrayList<StatePair> epsilons;

	public static Automaton fromDot(File f){
		determinism = true;
		automaton = null;
		epsilons = new ArrayList<StatePair>();
		states = new HashMap<String,State>();
		initial_state = null;	
		System.out.print("Parsing "+f.getName()+" ...");
		try{
			if(parser == null)
				parser = new DotParser(new FileInputStream(f));
			else
				parser.ReInit(new FileInputStream(f));
			parser.Start();
			System.out.println("Done!");
			automaton = new Automaton();
			automaton.setInitialState(initial_state);
			automaton.restoreInvariant();
			automaton.setDeterministic(determinism);
			automaton.addEpsilons(epsilons);			
			
		}catch(Exception e){
		System.out.println("Rejected!");
		e.printStackTrace();
		}
		return automaton;
	}
}

PARSER_END(DotParser)

SKIP:{" "|"\t"|"\r"|"\n"}

TOKEN:{
<OPEN_SQR:"[">|
<CLOSE_SQR:"]">|
<SHAPE_EQ:"shape">|
<SHAPE:("plaintext"|"circle"|"doublecircle")>|
<LABEL_EQ:"label">|
<STATE:((["0"-"9"])+|"initial")>|
<EMPTY_LABEL:"\"\"">|
<LABEL:("\""(((~["\""])("-"(~["\""]))?)|"&epsilon")"\"")>|
<END_STMT:";">|
<TRANS:"->">|
<COMMA:",">|
<DIGRAPH:"digraph">|
<AUTOMATON:"Automaton">|
<RANKDIR:"rankdir">|
<EQ:"=">|
<LR:"LR">|
<OPEN:"{">|
<CLOSE:"}">
}

void Start():{}{
	<DIGRAPH> <AUTOMATON> <OPEN>
	<RANKDIR> <EQ> <LR> <END_STMT>
	(Stmt())*
	<CLOSE>
}

void Stmt():{Token state,shape;}{	
	state=<STATE> <OPEN_SQR> <SHAPE_EQ> <EQ> shape=<SHAPE> <COMMA> <LABEL_EQ> <EQ> <EMPTY_LABEL> <CLOSE_SQR> <END_STMT>
	{
		if(!state.image.equals("initial")){
		
			State s = states.get(state.image); 
			if(s == null){
				s = new State();
				states.put(state.image,s);
			}
			if(shape.image.equals("doublecircle")){
				s.setAccept(true);
			}
			
		}
	}
	(Trans())*
}

void Trans():{Token state1,state2,label;}{
	state1=<STATE> <TRANS> state2=<STATE> 
	{
		if(state1.image.equals("initial")){
			State s = states.get(state2.image);
			if(s == null){
				s = new State();
				states.put(state2.image,s);
			}
			initial_state = s;
		}
	}	
	(
		<OPEN_SQR> <LABEL_EQ> <EQ> label=<LABEL> <CLOSE_SQR>
		{			
			State s1 = states.get(state1.image);
			State s2 = states.get(state2.image);
			
			if(s1 == null){
				s1 = new State();
				states.put(state1.image,s1);
			}
			
			if(s2 == null){
				s2 = new State();
				states.put(state2.image,s2);
			}
			
			if(label.image.contains("&epsilon")){
				epsilons.add(new StatePair(s1,s2));
				determinism = false;
				return;
			}
			
			Transition t1 = null;			
			
			if(label.image.contains("-")){				
				t1 = new Transition(
					label.image.charAt(1),
					label.image.charAt(3),
					s2
					);
			}
			else t1 = new Transition(label.image.charAt(1),s2);			
		
			if(determinism)
			for(Transition t2: s1.getTransitions()){
				determinism &= t1.getMin() > t2.getMax() || t2.getMin() > t1.getMax();
				if(!determinism) break;
			}
		
			s1.addTransition(t1);
		}
	)?
	
}