options{
	LOOKAHEAD=1;
}

PARSER_BEGIN(Autoanalyze)

import java.io.*;
import java.util.*;

public class Autoanalyze{	

	public static String str;
	public static Set<String> vars;
	public static File in;
	public static File out;	
	
	public static void hasAssignedValue(Token t) throws Exception{	
	if(!vars.contains(t.image))
	throw new Exception(in.getName()+" l."+t.beginLine+": Uninitialized variable \""+t.image+"\"");		
	}
	
	public static void main(String[] args){
		
		if(args.length != 1){
			System.out.println("Usage: java Autoanalyze <path_to_file>");
			return;
		}
		
		in = new File(args[0]);
		
		if(!in.exists() || !in.isFile()){
			System.out.println("Invalid file: "+args[0]);
			return;
		}
		
		vars = new HashSet<String>();
		
		str = "public class " +in.getName() + "{\n";
		str += "\tpublic static void main(String[] args){\n";
		
		System.out.print("Parsing "+in.getName()+" ... ");
		
		try{
			Autoanalyze parser = new Autoanalyze(new FileInputStream(in));
			parser.Start();
			
			
			str += "\t}\n}";
			System.out.println("Done!");
			
			//File out = new File(in.getName()+".java");
			//FileUtils.writeStringToFile(out,str);	
			
		}catch(Exception e){
		System.out.println("Rejected!");
		e.printStackTrace();
		}
	}
}

PARSER_END(Autoanalyze)

SKIP:{
" "|
"\t"|
"\n"|
"\r"
}

TOKEN:{
<END_STMT:";">|
<OPEN:"(">|
<CLOSE:")">|
<COMMA:",">|
<VAR:(["A"-"Z"])(["A"-"Z","a"-"z","0"-"9"])*>|
<ASSIGN:"=">|
<UNARY_OP:("complement")>|
<READ:"read">|
<PATH:("\"")(~["\""])*("\"")>|
<BINARY_OP:("union"|"concatenation"|"intersection"|"product"|"difference")>|
<TEST:"test">|
<COMPARE:"compare">|
<INFO:"info">|
<WRITE:"write">
}

void Start() throws Exception:{}{
	(Stmt())*
	<EOF>
}

void Stmt() throws Exception:{}{
	(Assign()|NAssign()) <END_STMT>
}

void Assign() throws Exception:{Token var;}{
	var=<VAR> <ASSIGN> Expr()
	{vars.add(var.image);}
	//{str += "Automaton "+var.image + " = ";}
}

void Expr() throws Exception:{Token t;}{	

	(t=<VAR>){hasAssignedValue(t);}|
	(t=<UNARY_OP> <OPEN> Expr() <CLOSE>)|
	(t=<BINARY_OP> <OPEN> Expr() <COMMA> Expr() <CLOSE>)|
	(<READ> <OPEN> t=<PATH> <CLOSE>)

}

void NAssign() throws Exception:{Token t1,t2;}{
	(
		(<TEST> <OPEN> t1=<VAR> <COMMA> t2=<PATH>){hasAssignedValue(t1);}|
		(<COMPARE> <OPEN> t1=<VAR> <COMMA> t2=<VAR>){hasAssignedValue(t1);hasAssignedValue(t2);}|
		(<INFO> <OPEN> t1=<VAR>){hasAssignedValue(t1);}|
		(<WRITE> <OPEN> t1=<VAR> <COMMA> t2=<PATH>{hasAssignedValue(t1);})
	) <CLOSE>

}